# -*- coding: utf-8 -*-
"""Proyecto Análisis de datos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pRkkIfxFfos7sJ6Zep13eS5snSGXelKO

Se procedio a migrar las librerias en orden y se importo la base de datos a analizar. Para poder trabajar de manera colaborativa con el archivo, hemos subido la base de datos a la carpeta compartida. La importacion de "data profiling" al principio dio errorer al correrlo pero se resolvio con copia del archivo original, verificacion del orden de importacion de librerias e importacion correcta del "profiling".

# Nueva sección
"""

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import colors
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

path="/content/drive/MyDrive/Diplomatura-Datos/ Base 6 Satisfacción de pasajeros de aerolíneas.csv"
datos_satisfaccion = pd.read_csv(path, encoding="latin-1",sep=',')

datos_satisfaccion.info()

datos_satisfaccion.head()

# Commented out IPython magic to ensure Python compatibility.
# %pip install -U ydata-profiling==4.1.2

import ydata_profiling as pp
print(pp.__version__)

pp.ProfileReport(datos_satisfaccion)

datos_satisfaccion.sample(15)

datosvr = pd.read_csv("/content/drive/MyDrive/Diplomatura-Datos/ Base 6 Satisfacción de pasajeros de aerolíneas.csv")

datosvr

datosvr.isnull().sum()

datosvr.isnull().sum()/len(datosvr)*100

datosvr_with_nan = datosvr[datosvr.isna().any(axis=1)]
print(datosvr_with_nan)

datosvr_with_nan

#funcion para ver desde la fila 213 todas las columnar para corroborar si realmente esa
#fila tine NaN en la columna Arrival Delay in Minutes
datosvr.iloc[213:]

#se genera una lista ordenada para enumerar las filas que contine la base de datos
datosvr["orden"] = np.arange(1,len(datosvr)+1)

#visualizar la tabla completa con el numero ingresa de ORDEN
datosvr

plt.plot(datosvr["orden"], datosvr["Arrival Delay in Minutes"])

condicion = [
             (datosvr['satisfaction']=="satisfied"),
             (datosvr['satisfaction']=="neutral or dissatisfied")
]
opciones = ['1','0']
datosvr['filtro'] = np.select(condicion, opciones)

datosvr

#Cálculo de porcentajes para cada grupo: satisfaction - neutral or diss
tabla = pd.crosstab(index=datosvr["Age"], columns=datosvr["satisfaction"])
porcentajes = tabla.div(tabla.sum(axis=1), axis=0) *100

# Creación del gráfico de barras agrupadas
plot = porcentajes.plot(kind="bar", stacked=True, figsize=(2,2))

handles, labels = plot.get_legend_handles_labels()
plot.legend(handles, labels, bbox_to_anchor=(1, 1), loc="upper left")

### para ver que porcentaje tiene
plot.set_title("Nivel de satisfaccion segun edad")
plot.set_xlabel("Age")
plot.set_ylabel("Porsentaje")
plt.show()

#visualizacion de frecuencia de satisfaction & neutral or dissatisfied
datosvr['satisfaction'].hist(bins=6)
plt.xlabel("satisfaction")
plt.ylabel("Frecuencia")
plt.show()

#Se guarda en una variable la frecuencia relacionando columna Age & columna satisfaction
# (cuanta la frecuenta con la que aparece, no si es sitsfaction or neutral)
datosvrAge = pd.crosstab(datosvr["Age"], columns="satisfaction")

#visualizacion de variable
datosvrAge

#de la variable generada "datosvrAge" se genera una nueva variable "datosvrAge_sample" con una muestra de 15 filas
datosvrAge_sample = datosvrAge.sample(15)

#vista de la nueva variable
datosvrAge_sample

#Visualizacion de la frecuencia de variables Age & columna satisfaction - no la valoracion
datosvrAge_sample.plot(kind='bar')
plt.xlabel('Age')
plt.ylabel('satisfaction')
plt.title('Satisfaction According to Age')
plt.show()

# Gráfico de barras agrupadas de valoracion(satisfaction) segun Class
plot1 = pd.crosstab(index=datosvr["Class"],
            columns=datosvr["satisfaction"]).apply(lambda r: r/r.sum() *100,
                                              axis=1).plot(kind='bar',figsize=(5,3)) #.plot(kind='bar', stacked=True,figsize=(10 ,8))

handles, labels = plot1.get_legend_handles_labels()
plot1.legend(handles, labels, bbox_to_anchor=(1, 1), loc='upper left')

#se toma una muestra comparndo la valoracion de satisfaccion y la edad
sample2 = datos_satisfaccion.sample(50)

sample2

# Gráfico de barras agrupadas de valoracion(satisfaction) segun edad de una muetra
plot2 = pd.crosstab(index=sample2["Age"],
            columns=sample2["satisfaction"]).apply(lambda r: r/r.sum() *100,
                                              axis=1).plot(kind='bar',figsize=(5,3)) #.plot(kind='bar', stacked=True,figsize=(10 ,8))

handles, labels = plot2.get_legend_handles_labels()
plot2.legend(handles, labels, bbox_to_anchor=(1, 1), loc='upper left')